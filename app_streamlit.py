import streamlit as st
import pandas as pd
import sqlite3
import altair as alt

DB = "energy.db"


@st.cache_data
def load_table(query):
    """Connects to the database and loads a table into a pandas DataFrame."""
    conn = sqlite3.connect(DB, check_same_thread=False)
    df = pd.read_sql_query(query, conn, parse_dates=["timestamp"])
    conn.close()
    return df


st.set_page_config(page_title="Energy Optimization Dashboard", layout="wide")

st.title("⚡️ Energy Optimization — Forecast & Prescriptive Schedule")
st.markdown(
    "This dashboard visualizes the forecasted energy demand and the optimized, cost-saving production schedule generated by the backend scripts.")

# Load the data from the database
forecasts = load_table("SELECT * FROM forecasts")
optim = load_table("SELECT * FROM optimizations")

if forecasts.empty or optim.empty:
    st.warning(" No forecast or optimization data found. Please run `forecast.py` and `optimize.py` first.")
else:

    st.sidebar.header("Filters")
    machines = sorted(forecasts['machine_id'].unique())
    default_selection = machines[:min(4, len(machines))]
    sel_m = st.sidebar.multiselect("Select machines to display:", machines, default=default_selection)

    st.sidebar.header("Overall KPIs (24h)")


    total_base_cost = optim['baseline_cost'].sum()
    total_opt_cost = optim['optimized_cost'].sum()
    savings = total_base_cost - total_opt_cost
    savings_percent = (savings / total_base_cost) * 100 if total_base_cost > 0 else 0

    # New KPI: Peak Demand Reduction (using hourly cost as a proxy for demand)
    hourly_costs = optim.groupby('timestamp').agg(
        baseline_hourly_cost=('baseline_cost', 'sum'),
        optimized_hourly_cost=('optimized_cost', 'sum')
    )
    peak_baseline = hourly_costs['baseline_hourly_cost'].max()
    peak_optimized = hourly_costs['optimized_hourly_cost'].max()
    peak_reduction_percent = ((peak_baseline - peak_optimized) / peak_baseline) * 100 if peak_baseline > 0 else 0

    # New KPI: Cost Per Unit
    total_baseline_prod = optim['baseline_production'].sum()
    total_optimized_prod = optim['optimized_production'].sum()
    cpu_baseline = total_base_cost / total_baseline_prod if total_baseline_prod > 0 else 0
    cpu_optimized = total_opt_cost / total_optimized_prod if total_optimized_prod > 0 else 0

    # Display KPIs in sidebar
    col1, col2 = st.sidebar.columns(2)
    col1.metric("Savings 💰", f"₹{savings:,.0f}")
    col2.metric("Savings %", f"{savings_percent:.1f}%")
    st.sidebar.metric("Peak Demand Reduction 📉", f"{peak_reduction_percent:.1f}%")

    st.sidebar.subheader("Cost Per Unit")
    col1, col2 = st.sidebar.columns(2)
    col1.metric("Baseline", f"₹{cpu_baseline:.2f}")
    col2.metric("Optimized", f"₹{cpu_optimized:.2f}")

    # ========= MAIN PAGE BODY =========

    # Create tabs for better organization
    tab1, tab2, tab3 = st.tabs(["📊 Overall Summary", "⚙️ Machine-Level Detail", "📈 Hourly Breakdown"])

    with tab1:
        st.header("Cost Analysis")
        col1, col2 = st.columns(2)
        col1.metric("Baseline Cost (Un-optimized)", f"₹{total_base_cost:,.2f}")
        col2.metric("Optimized Cost", f"₹{total_opt_cost:,.2f}", delta=f"-₹{savings:,.2f} (Saved)",
                    delta_color="inverse")

        # Combined cost chart (hourly summary)
        cost_summary = optim.groupby('timestamp').agg({'baseline_cost': 'sum', 'optimized_cost': 'sum'}).reset_index()
        cost_long = pd.melt(cost_summary, id_vars=['timestamp'], value_vars=['baseline_cost', 'optimized_cost'],
                            var_name='Cost Type', value_name='Hourly Cost')

        chart = alt.Chart(cost_long).mark_area(opacity=0.7).encode(
            x=alt.X('timestamp:T', title='Time'),
            y=alt.Y('Hourly Cost:Q', title='Cost (₹)', stack=None),
            color=alt.Color('Cost Type:N',
                            scale=alt.Scale(domain=['baseline_cost', 'optimized_cost'], range=['#FF8C00', '#1E90FF']),
                            legend=alt.Legend(title="Scenario"))
        ).properties(
            title="Baseline vs. Optimized Cost Over Time",
            height=350
        ).interactive()
        st.altair_chart(chart, use_container_width=True)

        # --- NEW: SAVINGS LEADERBOARD (PER MACHINE) ---
        st.header("Savings Contribution by Machine")
        machine_savings = optim.groupby('machine_id').agg(
            Savings=('baseline_cost', lambda x: x.sum() - optim.loc[x.index, 'optimized_cost'].sum())
        ).reset_index().sort_values('Savings', ascending=False)

        savings_chart = alt.Chart(machine_savings).mark_bar().encode(
            x=alt.X('Savings:Q', title='Total Savings (₹)'),
            y=alt.Y('machine_id:N', title='Machine', sort='-x'),
            tooltip=['machine_id', 'Savings']
        ).properties(
            title="Top Performing Machines for Cost Reduction"
        )
        st.altair_chart(savings_chart, use_container_width=True)

    with tab2:
        st.header("Per-Machine Production Schedule")
        if not sel_m:
            st.info("Select one or more machines from the sidebar to view their schedules.")
        else:
            for mid in sel_m:
                st.subheader(f"Machine {mid}")
                f_m = forecasts[forecasts['machine_id'] == mid].sort_values('timestamp')
                o_m = optim[optim['machine_id'] == mid].sort_values('timestamp')

                if f_m.empty or o_m.empty:
                    st.write("No data available for this machine in the selected timeframe.")
                    continue

                merged = pd.merge(f_m, o_m, on=['timestamp', 'machine_id'])
                df_plot = merged[['timestamp', 'predicted_demand', 'optimized_production', 'baseline_production']]
                df_plot = df_plot.melt(id_vars='timestamp',
                                       value_vars=['predicted_demand', 'optimized_production', 'baseline_production'],
                                       var_name='Series', value_name='Production Units')

                c = alt.Chart(df_plot).mark_line(point=True).encode(
                    x=alt.X('timestamp:T', title='Time'),
                    y=alt.Y('Production Units:Q', title='Units'),
                    color=alt.Color('Series:N', title='Metric', scale=alt.Scale(
                        domain=['predicted_demand', 'optimized_production', 'baseline_production'],
                        range=['#FFA500', '#1E90FF', '#D3D3D3']  # Colors: Orange, Blue, Light Gray
                    )),
                    strokeDash=alt.condition(
                        alt.datum.Series == 'baseline_production',
                        alt.value([5, 5]),  # A dashed line for baseline
                        alt.value([0]),  # A solid line for others
                    ),
                    tooltip=['timestamp:T', 'Production Units:Q', 'Series:N']
                ).properties(height=250).interactive()
                st.altair_chart(c, use_container_width=True)

                # --- UX IMPROVEMENT: Put dataframe in an expander ---
                with st.expander("View Sample Data"):
                    st.dataframe(merged[['timestamp', 'predicted_demand', 'optimized_production', 'optimized_cost',
                                         'baseline_cost']].head(8))

    with tab3:
        # --- NEW: HOURLY SAVINGS BREAKDOWN ---
        st.header("Hourly Savings Analysis")
        hourly_savings = hourly_costs.copy()
        hourly_savings['savings'] = hourly_savings['baseline_hourly_cost'] - hourly_savings['optimized_hourly_cost']
        hourly_savings = hourly_savings.reset_index()

        hourly_savings_chart = alt.Chart(hourly_savings).mark_bar().encode(
            x=alt.X('timestamp:T', title='Time'),
            y=alt.Y('savings:Q', title='Savings (₹)'),
            color=alt.condition(
                alt.datum.savings > 0,
                alt.value("mediumseagreen"),  # Positive savings in green
                alt.value("tomato")  # Negative savings (costs) in red
            ),
            tooltip=['timestamp:T', 'savings:Q']
        ).properties(
            title="Savings Achieved Per Hour",
            height=400
        ).interactive()
        st.altair_chart(hourly_savings_chart, use_container_width=True)